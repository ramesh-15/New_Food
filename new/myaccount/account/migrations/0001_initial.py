# Generated by Django 2.2.19 on 2023-02-13 14:12

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Contact',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254)),
                ('phone', models.CharField(max_length=100)),
                ('subject', models.CharField(max_length=100)),
                ('message', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Doner_details',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('dd_username', models.CharField(blank=True, max_length=100, null=True, verbose_name='User Name')),
                ('dd_email', models.EmailField(max_length=100, verbose_name='Email')),
                ('phone_number', models.IntegerField()),
                ('donation_from', models.CharField(choices=[('1', 'Restaurent'), ('2', 'Mess'), ('3', 'Hotel'), ('4', 'Hostel'), ('5', 'Events'), ('6', 'Donation'), ('7', 'Other')], max_length=100)),
                ('address', models.CharField(blank=True, max_length=100, null=True)),
                ('pincode', models.CharField(max_length=10, null=True)),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('password', models.CharField(max_length=25, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='food_requests',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(default='', max_length=100)),
                ('food_items', models.CharField(max_length=100)),
                ('pickup_point', models.CharField(max_length=100)),
                ('donar_contact', models.CharField(max_length=100)),
                ('date', models.DateField(default=datetime.date(2023, 2, 13))),
            ],
        ),
        migrations.CreateModel(
            name='NGO_Register',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('org_name', models.CharField(max_length=100, verbose_name='Organiser Name')),
                ('register_id', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254)),
                ('address', models.CharField(max_length=100)),
                ('city', models.CharField(max_length=100)),
                ('pincode', models.CharField(max_length=6)),
                ('contact', models.IntegerField()),
                ('pwd', models.CharField(max_length=50, verbose_name='password')),
                ('con_pwd', models.CharField(max_length=50, verbose_name=' confirm password')),
            ],
        ),
        migrations.CreateModel(
            name='Users_donations',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('food_name', models.CharField(max_length=100, verbose_name='Food Name')),
                ('food_type', models.CharField(choices=[('VEG', 'VEG'), ('NON-VEG', 'NON-VEG')], max_length=100)),
                ('quantity', models.PositiveIntegerField()),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('donar_contact', models.CharField(max_length=10)),
                ('food_pick_up', models.CharField(max_length=200)),
                ('pincode', models.CharField(max_length=6)),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_Donar', models.BooleanField(verbose_name='Donar')),
                ('is_NGO', models.BooleanField(verbose_name='NGO')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
